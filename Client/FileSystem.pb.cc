// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "FileSystem.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace myfs {

namespace {

const ::google::protobuf::Descriptor* GetAttrReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAttrReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAttrRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAttrRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAttrRep_Stat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAttrRep_Stat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadDirReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadDirReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadDirRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadDirRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadDirRep_DirEnt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadDirRep_DirEnt_reflection_ = NULL;
const ::google::protobuf::Descriptor* MkNodReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MkNodReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MkNodRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MkNodRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* MkDirReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MkDirReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* MkDirRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MkDirRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlinkReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlinkReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnlinkRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnlinkRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* RmDirReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RmDirReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RmDirRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RmDirRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RenameRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RenameRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchDirReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchDirReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchDirRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchDirRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddChunkReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddChunkReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddChunkRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddChunkRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelChunkReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelChunkReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DelChunkRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DelChunkRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteDataReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteDataReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteDataReq_CSAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteDataReq_CSAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteDataRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteDataRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteReq_CSAddr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteReq_CSAddr_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteRep_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadRep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadRep_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_FileSystem_2eproto() {
  protobuf_AddDesc_FileSystem_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "FileSystem.proto");
  GOOGLE_CHECK(file != NULL);
  GetAttrReq_descriptor_ = file->message_type(0);
  static const int GetAttrReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrReq, path_),
  };
  GetAttrReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAttrReq_descriptor_,
      GetAttrReq::default_instance_,
      GetAttrReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAttrReq));
  GetAttrRep_descriptor_ = file->message_type(1);
  static const int GetAttrRep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRep, st_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRep, returnval_),
  };
  GetAttrRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAttrRep_descriptor_,
      GetAttrRep::default_instance_,
      GetAttrRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAttrRep));
  GetAttrRep_Stat_descriptor_ = GetAttrRep_descriptor_->nested_type(0);
  static const int GetAttrRep_Stat_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRep_Stat, mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRep_Stat, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRep_Stat, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRep_Stat, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRep_Stat, atime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRep_Stat, mtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRep_Stat, ctime_),
  };
  GetAttrRep_Stat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAttrRep_Stat_descriptor_,
      GetAttrRep_Stat::default_instance_,
      GetAttrRep_Stat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRep_Stat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAttrRep_Stat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAttrRep_Stat));
  ReadDirReq_descriptor_ = file->message_type(2);
  static const int ReadDirReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDirReq, path_),
  };
  ReadDirReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadDirReq_descriptor_,
      ReadDirReq::default_instance_,
      ReadDirReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDirReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDirReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadDirReq));
  ReadDirRep_descriptor_ = file->message_type(3);
  static const int ReadDirRep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDirRep, dirents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDirRep, returnval_),
  };
  ReadDirRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadDirRep_descriptor_,
      ReadDirRep::default_instance_,
      ReadDirRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDirRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDirRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadDirRep));
  ReadDirRep_DirEnt_descriptor_ = ReadDirRep_descriptor_->nested_type(0);
  static const int ReadDirRep_DirEnt_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDirRep_DirEnt, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDirRep_DirEnt, type_),
  };
  ReadDirRep_DirEnt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadDirRep_DirEnt_descriptor_,
      ReadDirRep_DirEnt::default_instance_,
      ReadDirRep_DirEnt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDirRep_DirEnt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadDirRep_DirEnt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadDirRep_DirEnt));
  MkNodReq_descriptor_ = file->message_type(4);
  static const int MkNodReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkNodReq, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkNodReq, mode_),
  };
  MkNodReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MkNodReq_descriptor_,
      MkNodReq::default_instance_,
      MkNodReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkNodReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkNodReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MkNodReq));
  MkNodRep_descriptor_ = file->message_type(5);
  static const int MkNodRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkNodRep, returnval_),
  };
  MkNodRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MkNodRep_descriptor_,
      MkNodRep::default_instance_,
      MkNodRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkNodRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkNodRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MkNodRep));
  MkDirReq_descriptor_ = file->message_type(6);
  static const int MkDirReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkDirReq, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkDirReq, mode_),
  };
  MkDirReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MkDirReq_descriptor_,
      MkDirReq::default_instance_,
      MkDirReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkDirReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkDirReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MkDirReq));
  MkDirRep_descriptor_ = file->message_type(7);
  static const int MkDirRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkDirRep, returnval_),
  };
  MkDirRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MkDirRep_descriptor_,
      MkDirRep::default_instance_,
      MkDirRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkDirRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MkDirRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MkDirRep));
  UnlinkReq_descriptor_ = file->message_type(8);
  static const int UnlinkReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkReq, path_),
  };
  UnlinkReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlinkReq_descriptor_,
      UnlinkReq::default_instance_,
      UnlinkReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlinkReq));
  UnlinkRep_descriptor_ = file->message_type(9);
  static const int UnlinkRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkRep, returnval_),
  };
  UnlinkRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnlinkRep_descriptor_,
      UnlinkRep::default_instance_,
      UnlinkRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnlinkRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnlinkRep));
  RmDirReq_descriptor_ = file->message_type(10);
  static const int RmDirReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmDirReq, path_),
  };
  RmDirReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RmDirReq_descriptor_,
      RmDirReq::default_instance_,
      RmDirReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmDirReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmDirReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RmDirReq));
  RmDirRep_descriptor_ = file->message_type(11);
  static const int RmDirRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmDirRep, returnval_),
  };
  RmDirRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RmDirRep_descriptor_,
      RmDirRep::default_instance_,
      RmDirRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmDirRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RmDirRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RmDirRep));
  RenameReq_descriptor_ = file->message_type(12);
  static const int RenameReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameReq, from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameReq, to_),
  };
  RenameReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameReq_descriptor_,
      RenameReq::default_instance_,
      RenameReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameReq));
  RenameRep_descriptor_ = file->message_type(13);
  static const int RenameRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRep, returnval_),
  };
  RenameRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RenameRep_descriptor_,
      RenameRep::default_instance_,
      RenameRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RenameRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RenameRep));
  SearchDirReq_descriptor_ = file->message_type(14);
  static const int SearchDirReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDirReq, path_),
  };
  SearchDirReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchDirReq_descriptor_,
      SearchDirReq::default_instance_,
      SearchDirReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDirReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDirReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchDirReq));
  SearchDirRep_descriptor_ = file->message_type(15);
  static const int SearchDirRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDirRep, returnval_),
  };
  SearchDirRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchDirRep_descriptor_,
      SearchDirRep::default_instance_,
      SearchDirRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDirRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchDirRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchDirRep));
  AddChunkReq_descriptor_ = file->message_type(16);
  static const int AddChunkReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChunkReq, chunkid_),
  };
  AddChunkReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddChunkReq_descriptor_,
      AddChunkReq::default_instance_,
      AddChunkReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChunkReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChunkReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddChunkReq));
  AddChunkRep_descriptor_ = file->message_type(17);
  static const int AddChunkRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChunkRep, returnval_),
  };
  AddChunkRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddChunkRep_descriptor_,
      AddChunkRep::default_instance_,
      AddChunkRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChunkRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChunkRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddChunkRep));
  DelChunkReq_descriptor_ = file->message_type(18);
  static const int DelChunkReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChunkReq, chunkid_),
  };
  DelChunkReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelChunkReq_descriptor_,
      DelChunkReq::default_instance_,
      DelChunkReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChunkReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChunkReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelChunkReq));
  DelChunkRep_descriptor_ = file->message_type(19);
  static const int DelChunkRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChunkRep, returnval_),
  };
  DelChunkRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DelChunkRep_descriptor_,
      DelChunkRep::default_instance_,
      DelChunkRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChunkRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DelChunkRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DelChunkRep));
  WriteDataReq_descriptor_ = file->message_type(20);
  static const int WriteDataReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteDataReq, serveraddrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteDataReq, chunkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteDataReq, cacheid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteDataReq, data_),
  };
  WriteDataReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteDataReq_descriptor_,
      WriteDataReq::default_instance_,
      WriteDataReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteDataReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteDataReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteDataReq));
  WriteDataReq_CSAddr_descriptor_ = WriteDataReq_descriptor_->nested_type(0);
  static const int WriteDataReq_CSAddr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteDataReq_CSAddr, ipaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteDataReq_CSAddr, port_),
  };
  WriteDataReq_CSAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteDataReq_CSAddr_descriptor_,
      WriteDataReq_CSAddr::default_instance_,
      WriteDataReq_CSAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteDataReq_CSAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteDataReq_CSAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteDataReq_CSAddr));
  WriteDataRep_descriptor_ = file->message_type(21);
  static const int WriteDataRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteDataRep, returnval_),
  };
  WriteDataRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteDataRep_descriptor_,
      WriteDataRep::default_instance_,
      WriteDataRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteDataRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteDataRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteDataRep));
  WriteReq_descriptor_ = file->message_type(22);
  static const int WriteReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteReq, serveraddrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteReq, chunkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteReq, cacheid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteReq, offset_),
  };
  WriteReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteReq_descriptor_,
      WriteReq::default_instance_,
      WriteReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteReq));
  WriteReq_CSAddr_descriptor_ = WriteReq_descriptor_->nested_type(0);
  static const int WriteReq_CSAddr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteReq_CSAddr, ipaddr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteReq_CSAddr, port_),
  };
  WriteReq_CSAddr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteReq_CSAddr_descriptor_,
      WriteReq_CSAddr::default_instance_,
      WriteReq_CSAddr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteReq_CSAddr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteReq_CSAddr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteReq_CSAddr));
  WriteRep_descriptor_ = file->message_type(23);
  static const int WriteRep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRep, returnval_),
  };
  WriteRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteRep_descriptor_,
      WriteRep::default_instance_,
      WriteRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteRep));
  ReadReq_descriptor_ = file->message_type(24);
  static const int ReadReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadReq, chunkid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadReq, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadReq, length_),
  };
  ReadReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadReq_descriptor_,
      ReadReq::default_instance_,
      ReadReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadReq));
  ReadRep_descriptor_ = file->message_type(25);
  static const int ReadRep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRep, returnval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRep, data_),
  };
  ReadRep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadRep_descriptor_,
      ReadRep::default_instance_,
      ReadRep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadRep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadRep));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_FileSystem_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAttrReq_descriptor_, &GetAttrReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAttrRep_descriptor_, &GetAttrRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAttrRep_Stat_descriptor_, &GetAttrRep_Stat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadDirReq_descriptor_, &ReadDirReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadDirRep_descriptor_, &ReadDirRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadDirRep_DirEnt_descriptor_, &ReadDirRep_DirEnt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MkNodReq_descriptor_, &MkNodReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MkNodRep_descriptor_, &MkNodRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MkDirReq_descriptor_, &MkDirReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MkDirRep_descriptor_, &MkDirRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlinkReq_descriptor_, &UnlinkReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnlinkRep_descriptor_, &UnlinkRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RmDirReq_descriptor_, &RmDirReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RmDirRep_descriptor_, &RmDirRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameReq_descriptor_, &RenameReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RenameRep_descriptor_, &RenameRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchDirReq_descriptor_, &SearchDirReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchDirRep_descriptor_, &SearchDirRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddChunkReq_descriptor_, &AddChunkReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddChunkRep_descriptor_, &AddChunkRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelChunkReq_descriptor_, &DelChunkReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DelChunkRep_descriptor_, &DelChunkRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteDataReq_descriptor_, &WriteDataReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteDataReq_CSAddr_descriptor_, &WriteDataReq_CSAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteDataRep_descriptor_, &WriteDataRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteReq_descriptor_, &WriteReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteReq_CSAddr_descriptor_, &WriteReq_CSAddr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteRep_descriptor_, &WriteRep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadReq_descriptor_, &ReadReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadRep_descriptor_, &ReadRep::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_FileSystem_2eproto() {
  delete GetAttrReq::default_instance_;
  delete GetAttrReq_reflection_;
  delete GetAttrRep::default_instance_;
  delete GetAttrRep_reflection_;
  delete GetAttrRep_Stat::default_instance_;
  delete GetAttrRep_Stat_reflection_;
  delete ReadDirReq::default_instance_;
  delete ReadDirReq_reflection_;
  delete ReadDirRep::default_instance_;
  delete ReadDirRep_reflection_;
  delete ReadDirRep_DirEnt::default_instance_;
  delete ReadDirRep_DirEnt_reflection_;
  delete MkNodReq::default_instance_;
  delete MkNodReq_reflection_;
  delete MkNodRep::default_instance_;
  delete MkNodRep_reflection_;
  delete MkDirReq::default_instance_;
  delete MkDirReq_reflection_;
  delete MkDirRep::default_instance_;
  delete MkDirRep_reflection_;
  delete UnlinkReq::default_instance_;
  delete UnlinkReq_reflection_;
  delete UnlinkRep::default_instance_;
  delete UnlinkRep_reflection_;
  delete RmDirReq::default_instance_;
  delete RmDirReq_reflection_;
  delete RmDirRep::default_instance_;
  delete RmDirRep_reflection_;
  delete RenameReq::default_instance_;
  delete RenameReq_reflection_;
  delete RenameRep::default_instance_;
  delete RenameRep_reflection_;
  delete SearchDirReq::default_instance_;
  delete SearchDirReq_reflection_;
  delete SearchDirRep::default_instance_;
  delete SearchDirRep_reflection_;
  delete AddChunkReq::default_instance_;
  delete AddChunkReq_reflection_;
  delete AddChunkRep::default_instance_;
  delete AddChunkRep_reflection_;
  delete DelChunkReq::default_instance_;
  delete DelChunkReq_reflection_;
  delete DelChunkRep::default_instance_;
  delete DelChunkRep_reflection_;
  delete WriteDataReq::default_instance_;
  delete WriteDataReq_reflection_;
  delete WriteDataReq_CSAddr::default_instance_;
  delete WriteDataReq_CSAddr_reflection_;
  delete WriteDataRep::default_instance_;
  delete WriteDataRep_reflection_;
  delete WriteReq::default_instance_;
  delete WriteReq_reflection_;
  delete WriteReq_CSAddr::default_instance_;
  delete WriteReq_CSAddr_reflection_;
  delete WriteRep::default_instance_;
  delete WriteRep_reflection_;
  delete ReadReq::default_instance_;
  delete ReadReq_reflection_;
  delete ReadRep::default_instance_;
  delete ReadRep_reflection_;
}

void protobuf_AddDesc_FileSystem_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020FileSystem.proto\022\004myfs\"\032\n\nGetAttrReq\022\014"
    "\n\004path\030\001 \002(\t\"\255\001\n\nGetAttrRep\022!\n\002st\030\001 \002(\0132"
    "\025.myfs.GetAttrRep.Stat\022\021\n\treturnVal\030\002 \002("
    "\005\032i\n\004Stat\022\014\n\004mode\030\001 \002(\005\022\013\n\003uid\030\002 \002(\005\022\013\n\003"
    "gid\030\003 \002(\005\022\014\n\004size\030\004 \002(\005\022\r\n\005atime\030\005 \002(\005\022\r"
    "\n\005mtime\030\006 \002(\005\022\r\n\005ctime\030\007 \002(\005\"\032\n\nReadDirR"
    "eq\022\014\n\004path\030\001 \002(\t\"o\n\nReadDirRep\022(\n\007dirEnt"
    "s\030\001 \003(\0132\027.myfs.ReadDirRep.DirEnt\022\021\n\tretu"
    "rnVal\030\002 \002(\005\032$\n\006DirEnt\022\014\n\004name\030\001 \002(\t\022\014\n\004t"
    "ype\030\002 \002(\005\"&\n\010MkNodReq\022\014\n\004path\030\001 \002(\t\022\014\n\004m"
    "ode\030\002 \002(\005\"\035\n\010MkNodRep\022\021\n\treturnVal\030\001 \002(\005"
    "\"&\n\010MkDirReq\022\014\n\004path\030\001 \002(\t\022\014\n\004mode\030\002 \002(\005"
    "\"\035\n\010MkDirRep\022\021\n\treturnVal\030\001 \002(\005\"\031\n\tUnlin"
    "kReq\022\014\n\004path\030\001 \002(\t\"\036\n\tUnlinkRep\022\021\n\tretur"
    "nVal\030\001 \002(\005\"\030\n\010RmDirReq\022\014\n\004path\030\001 \002(\t\"\035\n\010"
    "RmDirRep\022\021\n\treturnVal\030\001 \002(\005\"%\n\tRenameReq"
    "\022\014\n\004from\030\001 \002(\t\022\n\n\002to\030\002 \002(\t\"\036\n\tRenameRep\022"
    "\021\n\treturnVal\030\001 \002(\005\"\034\n\014SearchDirReq\022\014\n\004pa"
    "th\030\001 \002(\t\"!\n\014SearchDirRep\022\021\n\treturnVal\030\001 "
    "\002(\005\"\036\n\013AddChunkReq\022\017\n\007chunkId\030\001 \002(\003\" \n\013A"
    "ddChunkRep\022\021\n\treturnVal\030\001 \002(\005\"\036\n\013DelChun"
    "kReq\022\017\n\007chunkId\030\001 \002(\003\" \n\013DelChunkRep\022\021\n\t"
    "returnVal\030\001 \002(\005\"\226\001\n\014WriteDataReq\022.\n\013serv"
    "erAddrs\030\001 \003(\0132\031.myfs.WriteDataReq.CSAddr"
    "\022\017\n\007chunkId\030\002 \002(\003\022\017\n\007cacheId\030\003 \002(\005\022\014\n\004da"
    "ta\030\004 \002(\014\032&\n\006CSAddr\022\016\n\006ipAddr\030\001 \002(\t\022\014\n\004po"
    "rt\030\002 \002(\005\"!\n\014WriteDataRep\022\021\n\treturnVal\030\001 "
    "\002(\005\"\220\001\n\010WriteReq\022*\n\013serverAddrs\030\001 \003(\0132\025."
    "myfs.WriteReq.CSAddr\022\017\n\007chunkId\030\002 \002(\003\022\017\n"
    "\007cacheId\030\003 \002(\005\022\016\n\006offset\030\004 \002(\005\032&\n\006CSAddr"
    "\022\016\n\006ipAddr\030\001 \002(\t\022\014\n\004port\030\002 \002(\005\"\035\n\010WriteR"
    "ep\022\021\n\treturnVal\030\001 \002(\005\":\n\007ReadReq\022\017\n\007chun"
    "kId\030\001 \002(\003\022\016\n\006offset\030\002 \002(\005\022\016\n\006length\030\003 \002("
    "\005\"*\n\007ReadRep\022\021\n\treturnVal\030\001 \002(\005\022\014\n\004data\030"
    "\002 \002(\t", 1365);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FileSystem.proto", &protobuf_RegisterTypes);
  GetAttrReq::default_instance_ = new GetAttrReq();
  GetAttrRep::default_instance_ = new GetAttrRep();
  GetAttrRep_Stat::default_instance_ = new GetAttrRep_Stat();
  ReadDirReq::default_instance_ = new ReadDirReq();
  ReadDirRep::default_instance_ = new ReadDirRep();
  ReadDirRep_DirEnt::default_instance_ = new ReadDirRep_DirEnt();
  MkNodReq::default_instance_ = new MkNodReq();
  MkNodRep::default_instance_ = new MkNodRep();
  MkDirReq::default_instance_ = new MkDirReq();
  MkDirRep::default_instance_ = new MkDirRep();
  UnlinkReq::default_instance_ = new UnlinkReq();
  UnlinkRep::default_instance_ = new UnlinkRep();
  RmDirReq::default_instance_ = new RmDirReq();
  RmDirRep::default_instance_ = new RmDirRep();
  RenameReq::default_instance_ = new RenameReq();
  RenameRep::default_instance_ = new RenameRep();
  SearchDirReq::default_instance_ = new SearchDirReq();
  SearchDirRep::default_instance_ = new SearchDirRep();
  AddChunkReq::default_instance_ = new AddChunkReq();
  AddChunkRep::default_instance_ = new AddChunkRep();
  DelChunkReq::default_instance_ = new DelChunkReq();
  DelChunkRep::default_instance_ = new DelChunkRep();
  WriteDataReq::default_instance_ = new WriteDataReq();
  WriteDataReq_CSAddr::default_instance_ = new WriteDataReq_CSAddr();
  WriteDataRep::default_instance_ = new WriteDataRep();
  WriteReq::default_instance_ = new WriteReq();
  WriteReq_CSAddr::default_instance_ = new WriteReq_CSAddr();
  WriteRep::default_instance_ = new WriteRep();
  ReadReq::default_instance_ = new ReadReq();
  ReadRep::default_instance_ = new ReadRep();
  GetAttrReq::default_instance_->InitAsDefaultInstance();
  GetAttrRep::default_instance_->InitAsDefaultInstance();
  GetAttrRep_Stat::default_instance_->InitAsDefaultInstance();
  ReadDirReq::default_instance_->InitAsDefaultInstance();
  ReadDirRep::default_instance_->InitAsDefaultInstance();
  ReadDirRep_DirEnt::default_instance_->InitAsDefaultInstance();
  MkNodReq::default_instance_->InitAsDefaultInstance();
  MkNodRep::default_instance_->InitAsDefaultInstance();
  MkDirReq::default_instance_->InitAsDefaultInstance();
  MkDirRep::default_instance_->InitAsDefaultInstance();
  UnlinkReq::default_instance_->InitAsDefaultInstance();
  UnlinkRep::default_instance_->InitAsDefaultInstance();
  RmDirReq::default_instance_->InitAsDefaultInstance();
  RmDirRep::default_instance_->InitAsDefaultInstance();
  RenameReq::default_instance_->InitAsDefaultInstance();
  RenameRep::default_instance_->InitAsDefaultInstance();
  SearchDirReq::default_instance_->InitAsDefaultInstance();
  SearchDirRep::default_instance_->InitAsDefaultInstance();
  AddChunkReq::default_instance_->InitAsDefaultInstance();
  AddChunkRep::default_instance_->InitAsDefaultInstance();
  DelChunkReq::default_instance_->InitAsDefaultInstance();
  DelChunkRep::default_instance_->InitAsDefaultInstance();
  WriteDataReq::default_instance_->InitAsDefaultInstance();
  WriteDataReq_CSAddr::default_instance_->InitAsDefaultInstance();
  WriteDataRep::default_instance_->InitAsDefaultInstance();
  WriteReq::default_instance_->InitAsDefaultInstance();
  WriteReq_CSAddr::default_instance_->InitAsDefaultInstance();
  WriteRep::default_instance_->InitAsDefaultInstance();
  ReadReq::default_instance_->InitAsDefaultInstance();
  ReadRep::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_FileSystem_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_FileSystem_2eproto {
  StaticDescriptorInitializer_FileSystem_2eproto() {
    protobuf_AddDesc_FileSystem_2eproto();
  }
} static_descriptor_initializer_FileSystem_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int GetAttrReq::kPathFieldNumber;
#endif  // !_MSC_VER

GetAttrReq::GetAttrReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAttrReq::InitAsDefaultInstance() {
}

GetAttrReq::GetAttrReq(const GetAttrReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAttrReq::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAttrReq::~GetAttrReq() {
  SharedDtor();
}

void GetAttrReq::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void GetAttrReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAttrReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAttrReq_descriptor_;
}

const GetAttrReq& GetAttrReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

GetAttrReq* GetAttrReq::default_instance_ = NULL;

GetAttrReq* GetAttrReq::New() const {
  return new GetAttrReq;
}

void GetAttrReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAttrReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAttrReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAttrReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAttrReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAttrReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAttrReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAttrReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAttrReq::MergeFrom(const GetAttrReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAttrReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAttrReq::CopyFrom(const GetAttrReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttrReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void GetAttrReq::Swap(GetAttrReq* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAttrReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAttrReq_descriptor_;
  metadata.reflection = GetAttrReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAttrRep_Stat::kModeFieldNumber;
const int GetAttrRep_Stat::kUidFieldNumber;
const int GetAttrRep_Stat::kGidFieldNumber;
const int GetAttrRep_Stat::kSizeFieldNumber;
const int GetAttrRep_Stat::kAtimeFieldNumber;
const int GetAttrRep_Stat::kMtimeFieldNumber;
const int GetAttrRep_Stat::kCtimeFieldNumber;
#endif  // !_MSC_VER

GetAttrRep_Stat::GetAttrRep_Stat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAttrRep_Stat::InitAsDefaultInstance() {
}

GetAttrRep_Stat::GetAttrRep_Stat(const GetAttrRep_Stat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAttrRep_Stat::SharedCtor() {
  _cached_size_ = 0;
  mode_ = 0;
  uid_ = 0;
  gid_ = 0;
  size_ = 0;
  atime_ = 0;
  mtime_ = 0;
  ctime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAttrRep_Stat::~GetAttrRep_Stat() {
  SharedDtor();
}

void GetAttrRep_Stat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAttrRep_Stat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAttrRep_Stat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAttrRep_Stat_descriptor_;
}

const GetAttrRep_Stat& GetAttrRep_Stat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

GetAttrRep_Stat* GetAttrRep_Stat::default_instance_ = NULL;

GetAttrRep_Stat* GetAttrRep_Stat::New() const {
  return new GetAttrRep_Stat;
}

void GetAttrRep_Stat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mode_ = 0;
    uid_ = 0;
    gid_ = 0;
    size_ = 0;
    atime_ = 0;
    mtime_ = 0;
    ctime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAttrRep_Stat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uid;
        break;
      }
      
      // required int32 uid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gid;
        break;
      }
      
      // required int32 gid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }
      
      // required int32 size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_atime;
        break;
      }
      
      // required int32 atime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_atime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &atime_)));
          set_has_atime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mtime;
        break;
      }
      
      // required int32 mtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mtime_)));
          set_has_mtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ctime;
        break;
      }
      
      // required int32 ctime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ctime_)));
          set_has_ctime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAttrRep_Stat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mode = 1;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mode(), output);
  }
  
  // required int32 uid = 2;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->uid(), output);
  }
  
  // required int32 gid = 3;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gid(), output);
  }
  
  // required int32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->size(), output);
  }
  
  // required int32 atime = 5;
  if (has_atime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->atime(), output);
  }
  
  // required int32 mtime = 6;
  if (has_mtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mtime(), output);
  }
  
  // required int32 ctime = 7;
  if (has_ctime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ctime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAttrRep_Stat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mode = 1;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mode(), target);
  }
  
  // required int32 uid = 2;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->uid(), target);
  }
  
  // required int32 gid = 3;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gid(), target);
  }
  
  // required int32 size = 4;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->size(), target);
  }
  
  // required int32 atime = 5;
  if (has_atime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->atime(), target);
  }
  
  // required int32 mtime = 6;
  if (has_mtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mtime(), target);
  }
  
  // required int32 ctime = 7;
  if (has_ctime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ctime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAttrRep_Stat::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mode = 1;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }
    
    // required int32 uid = 2;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // required int32 gid = 3;
    if (has_gid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // required int32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }
    
    // required int32 atime = 5;
    if (has_atime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->atime());
    }
    
    // required int32 mtime = 6;
    if (has_mtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mtime());
    }
    
    // required int32 ctime = 7;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ctime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAttrRep_Stat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAttrRep_Stat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAttrRep_Stat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAttrRep_Stat::MergeFrom(const GetAttrRep_Stat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mode()) {
      set_mode(from.mode());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_atime()) {
      set_atime(from.atime());
    }
    if (from.has_mtime()) {
      set_mtime(from.mtime());
    }
    if (from.has_ctime()) {
      set_ctime(from.ctime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAttrRep_Stat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAttrRep_Stat::CopyFrom(const GetAttrRep_Stat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttrRep_Stat::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;
  
  return true;
}

void GetAttrRep_Stat::Swap(GetAttrRep_Stat* other) {
  if (other != this) {
    std::swap(mode_, other->mode_);
    std::swap(uid_, other->uid_);
    std::swap(gid_, other->gid_);
    std::swap(size_, other->size_);
    std::swap(atime_, other->atime_);
    std::swap(mtime_, other->mtime_);
    std::swap(ctime_, other->ctime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAttrRep_Stat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAttrRep_Stat_descriptor_;
  metadata.reflection = GetAttrRep_Stat_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int GetAttrRep::kStFieldNumber;
const int GetAttrRep::kReturnValFieldNumber;
#endif  // !_MSC_VER

GetAttrRep::GetAttrRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAttrRep::InitAsDefaultInstance() {
  st_ = const_cast< ::myfs::GetAttrRep_Stat*>(&::myfs::GetAttrRep_Stat::default_instance());
}

GetAttrRep::GetAttrRep(const GetAttrRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAttrRep::SharedCtor() {
  _cached_size_ = 0;
  st_ = NULL;
  returnval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAttrRep::~GetAttrRep() {
  SharedDtor();
}

void GetAttrRep::SharedDtor() {
  if (this != default_instance_) {
    delete st_;
  }
}

void GetAttrRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAttrRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAttrRep_descriptor_;
}

const GetAttrRep& GetAttrRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

GetAttrRep* GetAttrRep::default_instance_ = NULL;

GetAttrRep* GetAttrRep::New() const {
  return new GetAttrRep;
}

void GetAttrRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_st()) {
      if (st_ != NULL) st_->::myfs::GetAttrRep_Stat::Clear();
    }
    returnval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAttrRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .myfs.GetAttrRep.Stat st = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_st()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_returnVal;
        break;
      }
      
      // required int32 returnVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_returnVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnval_)));
          set_has_returnval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAttrRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .myfs.GetAttrRep.Stat st = 1;
  if (has_st()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->st(), output);
  }
  
  // required int32 returnVal = 2;
  if (has_returnval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->returnval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAttrRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .myfs.GetAttrRep.Stat st = 1;
  if (has_st()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->st(), target);
  }
  
  // required int32 returnVal = 2;
  if (has_returnval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->returnval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAttrRep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .myfs.GetAttrRep.Stat st = 1;
    if (has_st()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->st());
    }
    
    // required int32 returnVal = 2;
    if (has_returnval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAttrRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAttrRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAttrRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAttrRep::MergeFrom(const GetAttrRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_st()) {
      mutable_st()->::myfs::GetAttrRep_Stat::MergeFrom(from.st());
    }
    if (from.has_returnval()) {
      set_returnval(from.returnval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAttrRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAttrRep::CopyFrom(const GetAttrRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAttrRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_st()) {
    if (!this->st().IsInitialized()) return false;
  }
  return true;
}

void GetAttrRep::Swap(GetAttrRep* other) {
  if (other != this) {
    std::swap(st_, other->st_);
    std::swap(returnval_, other->returnval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAttrRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAttrRep_descriptor_;
  metadata.reflection = GetAttrRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadDirReq::kPathFieldNumber;
#endif  // !_MSC_VER

ReadDirReq::ReadDirReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadDirReq::InitAsDefaultInstance() {
}

ReadDirReq::ReadDirReq(const ReadDirReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadDirReq::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadDirReq::~ReadDirReq() {
  SharedDtor();
}

void ReadDirReq::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void ReadDirReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadDirReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadDirReq_descriptor_;
}

const ReadDirReq& ReadDirReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

ReadDirReq* ReadDirReq::default_instance_ = NULL;

ReadDirReq* ReadDirReq::New() const {
  return new ReadDirReq;
}

void ReadDirReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadDirReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadDirReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadDirReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadDirReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadDirReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadDirReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadDirReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadDirReq::MergeFrom(const ReadDirReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadDirReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadDirReq::CopyFrom(const ReadDirReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDirReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ReadDirReq::Swap(ReadDirReq* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadDirReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadDirReq_descriptor_;
  metadata.reflection = ReadDirReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadDirRep_DirEnt::kNameFieldNumber;
const int ReadDirRep_DirEnt::kTypeFieldNumber;
#endif  // !_MSC_VER

ReadDirRep_DirEnt::ReadDirRep_DirEnt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadDirRep_DirEnt::InitAsDefaultInstance() {
}

ReadDirRep_DirEnt::ReadDirRep_DirEnt(const ReadDirRep_DirEnt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadDirRep_DirEnt::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadDirRep_DirEnt::~ReadDirRep_DirEnt() {
  SharedDtor();
}

void ReadDirRep_DirEnt::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ReadDirRep_DirEnt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadDirRep_DirEnt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadDirRep_DirEnt_descriptor_;
}

const ReadDirRep_DirEnt& ReadDirRep_DirEnt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

ReadDirRep_DirEnt* ReadDirRep_DirEnt::default_instance_ = NULL;

ReadDirRep_DirEnt* ReadDirRep_DirEnt::New() const {
  return new ReadDirRep_DirEnt;
}

void ReadDirRep_DirEnt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadDirRep_DirEnt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadDirRep_DirEnt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadDirRep_DirEnt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadDirRep_DirEnt::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadDirRep_DirEnt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadDirRep_DirEnt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadDirRep_DirEnt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadDirRep_DirEnt::MergeFrom(const ReadDirRep_DirEnt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadDirRep_DirEnt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadDirRep_DirEnt::CopyFrom(const ReadDirRep_DirEnt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDirRep_DirEnt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReadDirRep_DirEnt::Swap(ReadDirRep_DirEnt* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadDirRep_DirEnt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadDirRep_DirEnt_descriptor_;
  metadata.reflection = ReadDirRep_DirEnt_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ReadDirRep::kDirEntsFieldNumber;
const int ReadDirRep::kReturnValFieldNumber;
#endif  // !_MSC_VER

ReadDirRep::ReadDirRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadDirRep::InitAsDefaultInstance() {
}

ReadDirRep::ReadDirRep(const ReadDirRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadDirRep::SharedCtor() {
  _cached_size_ = 0;
  returnval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadDirRep::~ReadDirRep() {
  SharedDtor();
}

void ReadDirRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadDirRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadDirRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadDirRep_descriptor_;
}

const ReadDirRep& ReadDirRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

ReadDirRep* ReadDirRep::default_instance_ = NULL;

ReadDirRep* ReadDirRep::New() const {
  return new ReadDirRep;
}

void ReadDirRep::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    returnval_ = 0;
  }
  dirents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadDirRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .myfs.ReadDirRep.DirEnt dirEnts = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dirEnts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dirents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_dirEnts;
        if (input->ExpectTag(16)) goto parse_returnVal;
        break;
      }
      
      // required int32 returnVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_returnVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnval_)));
          set_has_returnval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadDirRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .myfs.ReadDirRep.DirEnt dirEnts = 1;
  for (int i = 0; i < this->dirents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dirents(i), output);
  }
  
  // required int32 returnVal = 2;
  if (has_returnval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->returnval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadDirRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .myfs.ReadDirRep.DirEnt dirEnts = 1;
  for (int i = 0; i < this->dirents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dirents(i), target);
  }
  
  // required int32 returnVal = 2;
  if (has_returnval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->returnval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadDirRep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 returnVal = 2;
    if (has_returnval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnval());
    }
    
  }
  // repeated .myfs.ReadDirRep.DirEnt dirEnts = 1;
  total_size += 1 * this->dirents_size();
  for (int i = 0; i < this->dirents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dirents(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadDirRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadDirRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadDirRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadDirRep::MergeFrom(const ReadDirRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  dirents_.MergeFrom(from.dirents_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_returnval()) {
      set_returnval(from.returnval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadDirRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadDirRep::CopyFrom(const ReadDirRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadDirRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < dirents_size(); i++) {
    if (!this->dirents(i).IsInitialized()) return false;
  }
  return true;
}

void ReadDirRep::Swap(ReadDirRep* other) {
  if (other != this) {
    dirents_.Swap(&other->dirents_);
    std::swap(returnval_, other->returnval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadDirRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadDirRep_descriptor_;
  metadata.reflection = ReadDirRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MkNodReq::kPathFieldNumber;
const int MkNodReq::kModeFieldNumber;
#endif  // !_MSC_VER

MkNodReq::MkNodReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MkNodReq::InitAsDefaultInstance() {
}

MkNodReq::MkNodReq(const MkNodReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MkNodReq::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MkNodReq::~MkNodReq() {
  SharedDtor();
}

void MkNodReq::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void MkNodReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MkNodReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MkNodReq_descriptor_;
}

const MkNodReq& MkNodReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

MkNodReq* MkNodReq::default_instance_ = NULL;

MkNodReq* MkNodReq::New() const {
  return new MkNodReq;
}

void MkNodReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    mode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MkNodReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }
      
      // required int32 mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MkNodReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  // required int32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MkNodReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  // required int32 mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MkNodReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // required int32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MkNodReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MkNodReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MkNodReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MkNodReq::MergeFrom(const MkNodReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MkNodReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MkNodReq::CopyFrom(const MkNodReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkNodReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MkNodReq::Swap(MkNodReq* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MkNodReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MkNodReq_descriptor_;
  metadata.reflection = MkNodReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MkNodRep::kReturnValFieldNumber;
#endif  // !_MSC_VER

MkNodRep::MkNodRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MkNodRep::InitAsDefaultInstance() {
}

MkNodRep::MkNodRep(const MkNodRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MkNodRep::SharedCtor() {
  _cached_size_ = 0;
  returnval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MkNodRep::~MkNodRep() {
  SharedDtor();
}

void MkNodRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MkNodRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MkNodRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MkNodRep_descriptor_;
}

const MkNodRep& MkNodRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

MkNodRep* MkNodRep::default_instance_ = NULL;

MkNodRep* MkNodRep::New() const {
  return new MkNodRep;
}

void MkNodRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    returnval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MkNodRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 returnVal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnval_)));
          set_has_returnval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MkNodRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->returnval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MkNodRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->returnval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MkNodRep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 returnVal = 1;
    if (has_returnval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MkNodRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MkNodRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MkNodRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MkNodRep::MergeFrom(const MkNodRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_returnval()) {
      set_returnval(from.returnval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MkNodRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MkNodRep::CopyFrom(const MkNodRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkNodRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MkNodRep::Swap(MkNodRep* other) {
  if (other != this) {
    std::swap(returnval_, other->returnval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MkNodRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MkNodRep_descriptor_;
  metadata.reflection = MkNodRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MkDirReq::kPathFieldNumber;
const int MkDirReq::kModeFieldNumber;
#endif  // !_MSC_VER

MkDirReq::MkDirReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MkDirReq::InitAsDefaultInstance() {
}

MkDirReq::MkDirReq(const MkDirReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MkDirReq::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MkDirReq::~MkDirReq() {
  SharedDtor();
}

void MkDirReq::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void MkDirReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MkDirReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MkDirReq_descriptor_;
}

const MkDirReq& MkDirReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

MkDirReq* MkDirReq::default_instance_ = NULL;

MkDirReq* MkDirReq::New() const {
  return new MkDirReq;
}

void MkDirReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
    mode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MkDirReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mode;
        break;
      }
      
      // required int32 mode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
          set_has_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MkDirReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  // required int32 mode = 2;
  if (has_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mode(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MkDirReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  // required int32 mode = 2;
  if (has_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mode(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MkDirReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
    // required int32 mode = 2;
    if (has_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mode());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MkDirReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MkDirReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MkDirReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MkDirReq::MergeFrom(const MkDirReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_mode()) {
      set_mode(from.mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MkDirReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MkDirReq::CopyFrom(const MkDirReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkDirReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MkDirReq::Swap(MkDirReq* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(mode_, other->mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MkDirReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MkDirReq_descriptor_;
  metadata.reflection = MkDirReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MkDirRep::kReturnValFieldNumber;
#endif  // !_MSC_VER

MkDirRep::MkDirRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MkDirRep::InitAsDefaultInstance() {
}

MkDirRep::MkDirRep(const MkDirRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MkDirRep::SharedCtor() {
  _cached_size_ = 0;
  returnval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MkDirRep::~MkDirRep() {
  SharedDtor();
}

void MkDirRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MkDirRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MkDirRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MkDirRep_descriptor_;
}

const MkDirRep& MkDirRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

MkDirRep* MkDirRep::default_instance_ = NULL;

MkDirRep* MkDirRep::New() const {
  return new MkDirRep;
}

void MkDirRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    returnval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MkDirRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 returnVal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnval_)));
          set_has_returnval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MkDirRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->returnval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MkDirRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->returnval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MkDirRep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 returnVal = 1;
    if (has_returnval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MkDirRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MkDirRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MkDirRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MkDirRep::MergeFrom(const MkDirRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_returnval()) {
      set_returnval(from.returnval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MkDirRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MkDirRep::CopyFrom(const MkDirRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MkDirRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void MkDirRep::Swap(MkDirRep* other) {
  if (other != this) {
    std::swap(returnval_, other->returnval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MkDirRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MkDirRep_descriptor_;
  metadata.reflection = MkDirRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlinkReq::kPathFieldNumber;
#endif  // !_MSC_VER

UnlinkReq::UnlinkReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnlinkReq::InitAsDefaultInstance() {
}

UnlinkReq::UnlinkReq(const UnlinkReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnlinkReq::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlinkReq::~UnlinkReq() {
  SharedDtor();
}

void UnlinkReq::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void UnlinkReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlinkReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlinkReq_descriptor_;
}

const UnlinkReq& UnlinkReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

UnlinkReq* UnlinkReq::default_instance_ = NULL;

UnlinkReq* UnlinkReq::New() const {
  return new UnlinkReq;
}

void UnlinkReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlinkReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnlinkReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnlinkReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnlinkReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlinkReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlinkReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlinkReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlinkReq::MergeFrom(const UnlinkReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlinkReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlinkReq::CopyFrom(const UnlinkReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlinkReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UnlinkReq::Swap(UnlinkReq* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlinkReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlinkReq_descriptor_;
  metadata.reflection = UnlinkReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnlinkRep::kReturnValFieldNumber;
#endif  // !_MSC_VER

UnlinkRep::UnlinkRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UnlinkRep::InitAsDefaultInstance() {
}

UnlinkRep::UnlinkRep(const UnlinkRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UnlinkRep::SharedCtor() {
  _cached_size_ = 0;
  returnval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnlinkRep::~UnlinkRep() {
  SharedDtor();
}

void UnlinkRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnlinkRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnlinkRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnlinkRep_descriptor_;
}

const UnlinkRep& UnlinkRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

UnlinkRep* UnlinkRep::default_instance_ = NULL;

UnlinkRep* UnlinkRep::New() const {
  return new UnlinkRep;
}

void UnlinkRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    returnval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnlinkRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 returnVal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnval_)));
          set_has_returnval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UnlinkRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->returnval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UnlinkRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->returnval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UnlinkRep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 returnVal = 1;
    if (has_returnval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnlinkRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnlinkRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnlinkRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnlinkRep::MergeFrom(const UnlinkRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_returnval()) {
      set_returnval(from.returnval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnlinkRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlinkRep::CopyFrom(const UnlinkRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlinkRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void UnlinkRep::Swap(UnlinkRep* other) {
  if (other != this) {
    std::swap(returnval_, other->returnval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnlinkRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnlinkRep_descriptor_;
  metadata.reflection = UnlinkRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RmDirReq::kPathFieldNumber;
#endif  // !_MSC_VER

RmDirReq::RmDirReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RmDirReq::InitAsDefaultInstance() {
}

RmDirReq::RmDirReq(const RmDirReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RmDirReq::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RmDirReq::~RmDirReq() {
  SharedDtor();
}

void RmDirReq::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void RmDirReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RmDirReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RmDirReq_descriptor_;
}

const RmDirReq& RmDirReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

RmDirReq* RmDirReq::default_instance_ = NULL;

RmDirReq* RmDirReq::New() const {
  return new RmDirReq;
}

void RmDirReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RmDirReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RmDirReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RmDirReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RmDirReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RmDirReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RmDirReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RmDirReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RmDirReq::MergeFrom(const RmDirReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RmDirReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RmDirReq::CopyFrom(const RmDirReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RmDirReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RmDirReq::Swap(RmDirReq* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RmDirReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RmDirReq_descriptor_;
  metadata.reflection = RmDirReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RmDirRep::kReturnValFieldNumber;
#endif  // !_MSC_VER

RmDirRep::RmDirRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RmDirRep::InitAsDefaultInstance() {
}

RmDirRep::RmDirRep(const RmDirRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RmDirRep::SharedCtor() {
  _cached_size_ = 0;
  returnval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RmDirRep::~RmDirRep() {
  SharedDtor();
}

void RmDirRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RmDirRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RmDirRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RmDirRep_descriptor_;
}

const RmDirRep& RmDirRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

RmDirRep* RmDirRep::default_instance_ = NULL;

RmDirRep* RmDirRep::New() const {
  return new RmDirRep;
}

void RmDirRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    returnval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RmDirRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 returnVal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnval_)));
          set_has_returnval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RmDirRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->returnval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RmDirRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->returnval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RmDirRep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 returnVal = 1;
    if (has_returnval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RmDirRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RmDirRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RmDirRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RmDirRep::MergeFrom(const RmDirRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_returnval()) {
      set_returnval(from.returnval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RmDirRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RmDirRep::CopyFrom(const RmDirRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RmDirRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RmDirRep::Swap(RmDirRep* other) {
  if (other != this) {
    std::swap(returnval_, other->returnval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RmDirRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RmDirRep_descriptor_;
  metadata.reflection = RmDirRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenameReq::kFromFieldNumber;
const int RenameReq::kToFieldNumber;
#endif  // !_MSC_VER

RenameReq::RenameReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenameReq::InitAsDefaultInstance() {
}

RenameReq::RenameReq(const RenameReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenameReq::SharedCtor() {
  _cached_size_ = 0;
  from_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  to_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameReq::~RenameReq() {
  SharedDtor();
}

void RenameReq::SharedDtor() {
  if (from_ != &::google::protobuf::internal::kEmptyString) {
    delete from_;
  }
  if (to_ != &::google::protobuf::internal::kEmptyString) {
    delete to_;
  }
  if (this != default_instance_) {
  }
}

void RenameReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameReq_descriptor_;
}

const RenameReq& RenameReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

RenameReq* RenameReq::default_instance_ = NULL;

RenameReq* RenameReq::New() const {
  return new RenameReq;
}

void RenameReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_from()) {
      if (from_ != &::google::protobuf::internal::kEmptyString) {
        from_->clear();
      }
    }
    if (has_to()) {
      if (to_ != &::google::protobuf::internal::kEmptyString) {
        to_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string from = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_from()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->from().data(), this->from().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_to;
        break;
      }
      
      // required string to = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_to:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to().data(), this->to().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenameReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->from(), output);
  }
  
  // required string to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->to(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenameReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string from = 1;
  if (has_from()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->from().data(), this->from().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->from(), target);
  }
  
  // required string to = 2;
  if (has_to()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to().data(), this->to().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->to(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenameReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string from = 1;
    if (has_from()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->from());
    }
    
    // required string to = 2;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameReq::MergeFrom(const RenameReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_from()) {
      set_from(from.from());
    }
    if (from.has_to()) {
      set_to(from.to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameReq::CopyFrom(const RenameReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RenameReq::Swap(RenameReq* other) {
  if (other != this) {
    std::swap(from_, other->from_);
    std::swap(to_, other->to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameReq_descriptor_;
  metadata.reflection = RenameReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RenameRep::kReturnValFieldNumber;
#endif  // !_MSC_VER

RenameRep::RenameRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RenameRep::InitAsDefaultInstance() {
}

RenameRep::RenameRep(const RenameRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RenameRep::SharedCtor() {
  _cached_size_ = 0;
  returnval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RenameRep::~RenameRep() {
  SharedDtor();
}

void RenameRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RenameRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RenameRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RenameRep_descriptor_;
}

const RenameRep& RenameRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

RenameRep* RenameRep::default_instance_ = NULL;

RenameRep* RenameRep::New() const {
  return new RenameRep;
}

void RenameRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    returnval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RenameRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 returnVal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnval_)));
          set_has_returnval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RenameRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->returnval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RenameRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->returnval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RenameRep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 returnVal = 1;
    if (has_returnval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RenameRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RenameRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RenameRep::MergeFrom(const RenameRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_returnval()) {
      set_returnval(from.returnval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RenameRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RenameRep::CopyFrom(const RenameRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RenameRep::Swap(RenameRep* other) {
  if (other != this) {
    std::swap(returnval_, other->returnval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RenameRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RenameRep_descriptor_;
  metadata.reflection = RenameRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchDirReq::kPathFieldNumber;
#endif  // !_MSC_VER

SearchDirReq::SearchDirReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchDirReq::InitAsDefaultInstance() {
}

SearchDirReq::SearchDirReq(const SearchDirReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchDirReq::SharedCtor() {
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchDirReq::~SearchDirReq() {
  SharedDtor();
}

void SearchDirReq::SharedDtor() {
  if (path_ != &::google::protobuf::internal::kEmptyString) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void SearchDirReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchDirReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchDirReq_descriptor_;
}

const SearchDirReq& SearchDirReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

SearchDirReq* SearchDirReq::default_instance_ = NULL;

SearchDirReq* SearchDirReq::New() const {
  return new SearchDirReq;
}

void SearchDirReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::kEmptyString) {
        path_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchDirReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchDirReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->path(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchDirReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchDirReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchDirReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchDirReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchDirReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchDirReq::MergeFrom(const SearchDirReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchDirReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchDirReq::CopyFrom(const SearchDirReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchDirReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SearchDirReq::Swap(SearchDirReq* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchDirReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchDirReq_descriptor_;
  metadata.reflection = SearchDirReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchDirRep::kReturnValFieldNumber;
#endif  // !_MSC_VER

SearchDirRep::SearchDirRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SearchDirRep::InitAsDefaultInstance() {
}

SearchDirRep::SearchDirRep(const SearchDirRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SearchDirRep::SharedCtor() {
  _cached_size_ = 0;
  returnval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchDirRep::~SearchDirRep() {
  SharedDtor();
}

void SearchDirRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchDirRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchDirRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchDirRep_descriptor_;
}

const SearchDirRep& SearchDirRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

SearchDirRep* SearchDirRep::default_instance_ = NULL;

SearchDirRep* SearchDirRep::New() const {
  return new SearchDirRep;
}

void SearchDirRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    returnval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchDirRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 returnVal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnval_)));
          set_has_returnval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SearchDirRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->returnval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SearchDirRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->returnval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SearchDirRep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 returnVal = 1;
    if (has_returnval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchDirRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchDirRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchDirRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchDirRep::MergeFrom(const SearchDirRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_returnval()) {
      set_returnval(from.returnval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchDirRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchDirRep::CopyFrom(const SearchDirRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchDirRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void SearchDirRep::Swap(SearchDirRep* other) {
  if (other != this) {
    std::swap(returnval_, other->returnval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchDirRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchDirRep_descriptor_;
  metadata.reflection = SearchDirRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddChunkReq::kChunkIdFieldNumber;
#endif  // !_MSC_VER

AddChunkReq::AddChunkReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddChunkReq::InitAsDefaultInstance() {
}

AddChunkReq::AddChunkReq(const AddChunkReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddChunkReq::SharedCtor() {
  _cached_size_ = 0;
  chunkid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddChunkReq::~AddChunkReq() {
  SharedDtor();
}

void AddChunkReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddChunkReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddChunkReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddChunkReq_descriptor_;
}

const AddChunkReq& AddChunkReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

AddChunkReq* AddChunkReq::default_instance_ = NULL;

AddChunkReq* AddChunkReq::New() const {
  return new AddChunkReq;
}

void AddChunkReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chunkid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddChunkReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 chunkId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunkid_)));
          set_has_chunkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddChunkReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 chunkId = 1;
  if (has_chunkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->chunkid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddChunkReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 chunkId = 1;
  if (has_chunkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->chunkid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddChunkReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 chunkId = 1;
    if (has_chunkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chunkid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddChunkReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddChunkReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddChunkReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddChunkReq::MergeFrom(const AddChunkReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chunkid()) {
      set_chunkid(from.chunkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddChunkReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddChunkReq::CopyFrom(const AddChunkReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddChunkReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AddChunkReq::Swap(AddChunkReq* other) {
  if (other != this) {
    std::swap(chunkid_, other->chunkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddChunkReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddChunkReq_descriptor_;
  metadata.reflection = AddChunkReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddChunkRep::kReturnValFieldNumber;
#endif  // !_MSC_VER

AddChunkRep::AddChunkRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddChunkRep::InitAsDefaultInstance() {
}

AddChunkRep::AddChunkRep(const AddChunkRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddChunkRep::SharedCtor() {
  _cached_size_ = 0;
  returnval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddChunkRep::~AddChunkRep() {
  SharedDtor();
}

void AddChunkRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddChunkRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddChunkRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddChunkRep_descriptor_;
}

const AddChunkRep& AddChunkRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

AddChunkRep* AddChunkRep::default_instance_ = NULL;

AddChunkRep* AddChunkRep::New() const {
  return new AddChunkRep;
}

void AddChunkRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    returnval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddChunkRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 returnVal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnval_)));
          set_has_returnval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddChunkRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->returnval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddChunkRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->returnval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddChunkRep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 returnVal = 1;
    if (has_returnval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddChunkRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddChunkRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddChunkRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddChunkRep::MergeFrom(const AddChunkRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_returnval()) {
      set_returnval(from.returnval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddChunkRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddChunkRep::CopyFrom(const AddChunkRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddChunkRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AddChunkRep::Swap(AddChunkRep* other) {
  if (other != this) {
    std::swap(returnval_, other->returnval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddChunkRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddChunkRep_descriptor_;
  metadata.reflection = AddChunkRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelChunkReq::kChunkIdFieldNumber;
#endif  // !_MSC_VER

DelChunkReq::DelChunkReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelChunkReq::InitAsDefaultInstance() {
}

DelChunkReq::DelChunkReq(const DelChunkReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelChunkReq::SharedCtor() {
  _cached_size_ = 0;
  chunkid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelChunkReq::~DelChunkReq() {
  SharedDtor();
}

void DelChunkReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelChunkReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelChunkReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelChunkReq_descriptor_;
}

const DelChunkReq& DelChunkReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

DelChunkReq* DelChunkReq::default_instance_ = NULL;

DelChunkReq* DelChunkReq::New() const {
  return new DelChunkReq;
}

void DelChunkReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chunkid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelChunkReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 chunkId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunkid_)));
          set_has_chunkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelChunkReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 chunkId = 1;
  if (has_chunkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->chunkid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelChunkReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 chunkId = 1;
  if (has_chunkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->chunkid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelChunkReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 chunkId = 1;
    if (has_chunkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chunkid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelChunkReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelChunkReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelChunkReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelChunkReq::MergeFrom(const DelChunkReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chunkid()) {
      set_chunkid(from.chunkid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelChunkReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelChunkReq::CopyFrom(const DelChunkReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelChunkReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DelChunkReq::Swap(DelChunkReq* other) {
  if (other != this) {
    std::swap(chunkid_, other->chunkid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelChunkReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelChunkReq_descriptor_;
  metadata.reflection = DelChunkReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DelChunkRep::kReturnValFieldNumber;
#endif  // !_MSC_VER

DelChunkRep::DelChunkRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DelChunkRep::InitAsDefaultInstance() {
}

DelChunkRep::DelChunkRep(const DelChunkRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DelChunkRep::SharedCtor() {
  _cached_size_ = 0;
  returnval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DelChunkRep::~DelChunkRep() {
  SharedDtor();
}

void DelChunkRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DelChunkRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DelChunkRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DelChunkRep_descriptor_;
}

const DelChunkRep& DelChunkRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

DelChunkRep* DelChunkRep::default_instance_ = NULL;

DelChunkRep* DelChunkRep::New() const {
  return new DelChunkRep;
}

void DelChunkRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    returnval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DelChunkRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 returnVal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnval_)));
          set_has_returnval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DelChunkRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->returnval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DelChunkRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->returnval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DelChunkRep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 returnVal = 1;
    if (has_returnval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelChunkRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DelChunkRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DelChunkRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DelChunkRep::MergeFrom(const DelChunkRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_returnval()) {
      set_returnval(from.returnval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DelChunkRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DelChunkRep::CopyFrom(const DelChunkRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelChunkRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void DelChunkRep::Swap(DelChunkRep* other) {
  if (other != this) {
    std::swap(returnval_, other->returnval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DelChunkRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DelChunkRep_descriptor_;
  metadata.reflection = DelChunkRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteDataReq_CSAddr::kIpAddrFieldNumber;
const int WriteDataReq_CSAddr::kPortFieldNumber;
#endif  // !_MSC_VER

WriteDataReq_CSAddr::WriteDataReq_CSAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteDataReq_CSAddr::InitAsDefaultInstance() {
}

WriteDataReq_CSAddr::WriteDataReq_CSAddr(const WriteDataReq_CSAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteDataReq_CSAddr::SharedCtor() {
  _cached_size_ = 0;
  ipaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteDataReq_CSAddr::~WriteDataReq_CSAddr() {
  SharedDtor();
}

void WriteDataReq_CSAddr::SharedDtor() {
  if (ipaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddr_;
  }
  if (this != default_instance_) {
  }
}

void WriteDataReq_CSAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteDataReq_CSAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteDataReq_CSAddr_descriptor_;
}

const WriteDataReq_CSAddr& WriteDataReq_CSAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

WriteDataReq_CSAddr* WriteDataReq_CSAddr::default_instance_ = NULL;

WriteDataReq_CSAddr* WriteDataReq_CSAddr::New() const {
  return new WriteDataReq_CSAddr;
}

void WriteDataReq_CSAddr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ipaddr()) {
      if (ipaddr_ != &::google::protobuf::internal::kEmptyString) {
        ipaddr_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteDataReq_CSAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ipAddr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipaddr().data(), this->ipaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteDataReq_CSAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ipAddr = 1;
  if (has_ipaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddr().data(), this->ipaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ipaddr(), output);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteDataReq_CSAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ipAddr = 1;
  if (has_ipaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddr().data(), this->ipaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ipaddr(), target);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteDataReq_CSAddr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ipAddr = 1;
    if (has_ipaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddr());
    }
    
    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteDataReq_CSAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteDataReq_CSAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteDataReq_CSAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteDataReq_CSAddr::MergeFrom(const WriteDataReq_CSAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipaddr()) {
      set_ipaddr(from.ipaddr());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteDataReq_CSAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteDataReq_CSAddr::CopyFrom(const WriteDataReq_CSAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteDataReq_CSAddr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void WriteDataReq_CSAddr::Swap(WriteDataReq_CSAddr* other) {
  if (other != this) {
    std::swap(ipaddr_, other->ipaddr_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteDataReq_CSAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteDataReq_CSAddr_descriptor_;
  metadata.reflection = WriteDataReq_CSAddr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WriteDataReq::kServerAddrsFieldNumber;
const int WriteDataReq::kChunkIdFieldNumber;
const int WriteDataReq::kCacheIdFieldNumber;
const int WriteDataReq::kDataFieldNumber;
#endif  // !_MSC_VER

WriteDataReq::WriteDataReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteDataReq::InitAsDefaultInstance() {
}

WriteDataReq::WriteDataReq(const WriteDataReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteDataReq::SharedCtor() {
  _cached_size_ = 0;
  chunkid_ = GOOGLE_LONGLONG(0);
  cacheid_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteDataReq::~WriteDataReq() {
  SharedDtor();
}

void WriteDataReq::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void WriteDataReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteDataReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteDataReq_descriptor_;
}

const WriteDataReq& WriteDataReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

WriteDataReq* WriteDataReq::default_instance_ = NULL;

WriteDataReq* WriteDataReq::New() const {
  return new WriteDataReq;
}

void WriteDataReq::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    chunkid_ = GOOGLE_LONGLONG(0);
    cacheid_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  serveraddrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteDataReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .myfs.WriteDataReq.CSAddr serverAddrs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverAddrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serveraddrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_serverAddrs;
        if (input->ExpectTag(16)) goto parse_chunkId;
        break;
      }
      
      // required int64 chunkId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunkid_)));
          set_has_chunkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cacheId;
        break;
      }
      
      // required int32 cacheId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cacheId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cacheid_)));
          set_has_cacheid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }
      
      // required bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteDataReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .myfs.WriteDataReq.CSAddr serverAddrs = 1;
  for (int i = 0; i < this->serveraddrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serveraddrs(i), output);
  }
  
  // required int64 chunkId = 2;
  if (has_chunkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->chunkid(), output);
  }
  
  // required int32 cacheId = 3;
  if (has_cacheid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cacheid(), output);
  }
  
  // required bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteDataReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .myfs.WriteDataReq.CSAddr serverAddrs = 1;
  for (int i = 0; i < this->serveraddrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serveraddrs(i), target);
  }
  
  // required int64 chunkId = 2;
  if (has_chunkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->chunkid(), target);
  }
  
  // required int32 cacheId = 3;
  if (has_cacheid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cacheid(), target);
  }
  
  // required bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteDataReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int64 chunkId = 2;
    if (has_chunkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chunkid());
    }
    
    // required int32 cacheId = 3;
    if (has_cacheid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cacheid());
    }
    
    // required bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  // repeated .myfs.WriteDataReq.CSAddr serverAddrs = 1;
  total_size += 1 * this->serveraddrs_size();
  for (int i = 0; i < this->serveraddrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serveraddrs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteDataReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteDataReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteDataReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteDataReq::MergeFrom(const WriteDataReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  serveraddrs_.MergeFrom(from.serveraddrs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_chunkid()) {
      set_chunkid(from.chunkid());
    }
    if (from.has_cacheid()) {
      set_cacheid(from.cacheid());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteDataReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteDataReq::CopyFrom(const WriteDataReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteDataReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  for (int i = 0; i < serveraddrs_size(); i++) {
    if (!this->serveraddrs(i).IsInitialized()) return false;
  }
  return true;
}

void WriteDataReq::Swap(WriteDataReq* other) {
  if (other != this) {
    serveraddrs_.Swap(&other->serveraddrs_);
    std::swap(chunkid_, other->chunkid_);
    std::swap(cacheid_, other->cacheid_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteDataReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteDataReq_descriptor_;
  metadata.reflection = WriteDataReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteDataRep::kReturnValFieldNumber;
#endif  // !_MSC_VER

WriteDataRep::WriteDataRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteDataRep::InitAsDefaultInstance() {
}

WriteDataRep::WriteDataRep(const WriteDataRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteDataRep::SharedCtor() {
  _cached_size_ = 0;
  returnval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteDataRep::~WriteDataRep() {
  SharedDtor();
}

void WriteDataRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WriteDataRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteDataRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteDataRep_descriptor_;
}

const WriteDataRep& WriteDataRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

WriteDataRep* WriteDataRep::default_instance_ = NULL;

WriteDataRep* WriteDataRep::New() const {
  return new WriteDataRep;
}

void WriteDataRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    returnval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteDataRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 returnVal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnval_)));
          set_has_returnval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteDataRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->returnval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteDataRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->returnval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteDataRep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 returnVal = 1;
    if (has_returnval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteDataRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteDataRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteDataRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteDataRep::MergeFrom(const WriteDataRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_returnval()) {
      set_returnval(from.returnval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteDataRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteDataRep::CopyFrom(const WriteDataRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteDataRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WriteDataRep::Swap(WriteDataRep* other) {
  if (other != this) {
    std::swap(returnval_, other->returnval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteDataRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteDataRep_descriptor_;
  metadata.reflection = WriteDataRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteReq_CSAddr::kIpAddrFieldNumber;
const int WriteReq_CSAddr::kPortFieldNumber;
#endif  // !_MSC_VER

WriteReq_CSAddr::WriteReq_CSAddr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteReq_CSAddr::InitAsDefaultInstance() {
}

WriteReq_CSAddr::WriteReq_CSAddr(const WriteReq_CSAddr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteReq_CSAddr::SharedCtor() {
  _cached_size_ = 0;
  ipaddr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteReq_CSAddr::~WriteReq_CSAddr() {
  SharedDtor();
}

void WriteReq_CSAddr::SharedDtor() {
  if (ipaddr_ != &::google::protobuf::internal::kEmptyString) {
    delete ipaddr_;
  }
  if (this != default_instance_) {
  }
}

void WriteReq_CSAddr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteReq_CSAddr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteReq_CSAddr_descriptor_;
}

const WriteReq_CSAddr& WriteReq_CSAddr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

WriteReq_CSAddr* WriteReq_CSAddr::default_instance_ = NULL;

WriteReq_CSAddr* WriteReq_CSAddr::New() const {
  return new WriteReq_CSAddr;
}

void WriteReq_CSAddr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ipaddr()) {
      if (ipaddr_ != &::google::protobuf::internal::kEmptyString) {
        ipaddr_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteReq_CSAddr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ipAddr = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ipaddr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ipaddr().data(), this->ipaddr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // required int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteReq_CSAddr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ipAddr = 1;
  if (has_ipaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddr().data(), this->ipaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ipaddr(), output);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteReq_CSAddr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ipAddr = 1;
  if (has_ipaddr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ipaddr().data(), this->ipaddr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ipaddr(), target);
  }
  
  // required int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteReq_CSAddr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ipAddr = 1;
    if (has_ipaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ipaddr());
    }
    
    // required int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteReq_CSAddr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteReq_CSAddr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteReq_CSAddr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteReq_CSAddr::MergeFrom(const WriteReq_CSAddr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ipaddr()) {
      set_ipaddr(from.ipaddr());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteReq_CSAddr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteReq_CSAddr::CopyFrom(const WriteReq_CSAddr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteReq_CSAddr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void WriteReq_CSAddr::Swap(WriteReq_CSAddr* other) {
  if (other != this) {
    std::swap(ipaddr_, other->ipaddr_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteReq_CSAddr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteReq_CSAddr_descriptor_;
  metadata.reflection = WriteReq_CSAddr_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int WriteReq::kServerAddrsFieldNumber;
const int WriteReq::kChunkIdFieldNumber;
const int WriteReq::kCacheIdFieldNumber;
const int WriteReq::kOffsetFieldNumber;
#endif  // !_MSC_VER

WriteReq::WriteReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteReq::InitAsDefaultInstance() {
}

WriteReq::WriteReq(const WriteReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteReq::SharedCtor() {
  _cached_size_ = 0;
  chunkid_ = GOOGLE_LONGLONG(0);
  cacheid_ = 0;
  offset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteReq::~WriteReq() {
  SharedDtor();
}

void WriteReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WriteReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteReq_descriptor_;
}

const WriteReq& WriteReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

WriteReq* WriteReq::default_instance_ = NULL;

WriteReq* WriteReq::New() const {
  return new WriteReq;
}

void WriteReq::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    chunkid_ = GOOGLE_LONGLONG(0);
    cacheid_ = 0;
    offset_ = 0;
  }
  serveraddrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .myfs.WriteReq.CSAddr serverAddrs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverAddrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_serveraddrs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_serverAddrs;
        if (input->ExpectTag(16)) goto parse_chunkId;
        break;
      }
      
      // required int64 chunkId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chunkId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunkid_)));
          set_has_chunkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cacheId;
        break;
      }
      
      // required int32 cacheId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cacheId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cacheid_)));
          set_has_cacheid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offset;
        break;
      }
      
      // required int32 offset = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .myfs.WriteReq.CSAddr serverAddrs = 1;
  for (int i = 0; i < this->serveraddrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->serveraddrs(i), output);
  }
  
  // required int64 chunkId = 2;
  if (has_chunkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->chunkid(), output);
  }
  
  // required int32 cacheId = 3;
  if (has_cacheid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cacheid(), output);
  }
  
  // required int32 offset = 4;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->offset(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .myfs.WriteReq.CSAddr serverAddrs = 1;
  for (int i = 0; i < this->serveraddrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->serveraddrs(i), target);
  }
  
  // required int64 chunkId = 2;
  if (has_chunkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->chunkid(), target);
  }
  
  // required int32 cacheId = 3;
  if (has_cacheid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cacheid(), target);
  }
  
  // required int32 offset = 4;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->offset(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int64 chunkId = 2;
    if (has_chunkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chunkid());
    }
    
    // required int32 cacheId = 3;
    if (has_cacheid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cacheid());
    }
    
    // required int32 offset = 4;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }
    
  }
  // repeated .myfs.WriteReq.CSAddr serverAddrs = 1;
  total_size += 1 * this->serveraddrs_size();
  for (int i = 0; i < this->serveraddrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->serveraddrs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteReq::MergeFrom(const WriteReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  serveraddrs_.MergeFrom(from.serveraddrs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_chunkid()) {
      set_chunkid(from.chunkid());
    }
    if (from.has_cacheid()) {
      set_cacheid(from.cacheid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteReq::CopyFrom(const WriteReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000e) != 0x0000000e) return false;
  
  for (int i = 0; i < serveraddrs_size(); i++) {
    if (!this->serveraddrs(i).IsInitialized()) return false;
  }
  return true;
}

void WriteReq::Swap(WriteReq* other) {
  if (other != this) {
    serveraddrs_.Swap(&other->serveraddrs_);
    std::swap(chunkid_, other->chunkid_);
    std::swap(cacheid_, other->cacheid_);
    std::swap(offset_, other->offset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteReq_descriptor_;
  metadata.reflection = WriteReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteRep::kReturnValFieldNumber;
#endif  // !_MSC_VER

WriteRep::WriteRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteRep::InitAsDefaultInstance() {
}

WriteRep::WriteRep(const WriteRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteRep::SharedCtor() {
  _cached_size_ = 0;
  returnval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteRep::~WriteRep() {
  SharedDtor();
}

void WriteRep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WriteRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteRep_descriptor_;
}

const WriteRep& WriteRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

WriteRep* WriteRep::default_instance_ = NULL;

WriteRep* WriteRep::New() const {
  return new WriteRep;
}

void WriteRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    returnval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 returnVal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnval_)));
          set_has_returnval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->returnval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->returnval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteRep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 returnVal = 1;
    if (has_returnval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteRep::MergeFrom(const WriteRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_returnval()) {
      set_returnval(from.returnval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteRep::CopyFrom(const WriteRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void WriteRep::Swap(WriteRep* other) {
  if (other != this) {
    std::swap(returnval_, other->returnval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteRep_descriptor_;
  metadata.reflection = WriteRep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadReq::kChunkIdFieldNumber;
const int ReadReq::kOffsetFieldNumber;
const int ReadReq::kLengthFieldNumber;
#endif  // !_MSC_VER

ReadReq::ReadReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadReq::InitAsDefaultInstance() {
}

ReadReq::ReadReq(const ReadReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadReq::SharedCtor() {
  _cached_size_ = 0;
  chunkid_ = GOOGLE_LONGLONG(0);
  offset_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadReq::~ReadReq() {
  SharedDtor();
}

void ReadReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadReq_descriptor_;
}

const ReadReq& ReadReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

ReadReq* ReadReq::default_instance_ = NULL;

ReadReq* ReadReq::New() const {
  return new ReadReq;
}

void ReadReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    chunkid_ = GOOGLE_LONGLONG(0);
    offset_ = 0;
    length_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 chunkId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &chunkid_)));
          set_has_chunkid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_offset;
        break;
      }
      
      // required int32 offset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_length;
        break;
      }
      
      // required int32 length = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 chunkId = 1;
  if (has_chunkid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->chunkid(), output);
  }
  
  // required int32 offset = 2;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offset(), output);
  }
  
  // required int32 length = 3;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->length(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 chunkId = 1;
  if (has_chunkid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->chunkid(), target);
  }
  
  // required int32 offset = 2;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offset(), target);
  }
  
  // required int32 length = 3;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->length(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadReq::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 chunkId = 1;
    if (has_chunkid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->chunkid());
    }
    
    // required int32 offset = 2;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }
    
    // required int32 length = 3;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadReq::MergeFrom(const ReadReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chunkid()) {
      set_chunkid(from.chunkid());
    }
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadReq::CopyFrom(const ReadReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ReadReq::Swap(ReadReq* other) {
  if (other != this) {
    std::swap(chunkid_, other->chunkid_);
    std::swap(offset_, other->offset_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadReq_descriptor_;
  metadata.reflection = ReadReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadRep::kReturnValFieldNumber;
const int ReadRep::kDataFieldNumber;
#endif  // !_MSC_VER

ReadRep::ReadRep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadRep::InitAsDefaultInstance() {
}

ReadRep::ReadRep(const ReadRep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadRep::SharedCtor() {
  _cached_size_ = 0;
  returnval_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadRep::~ReadRep() {
  SharedDtor();
}

void ReadRep::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void ReadRep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadRep_descriptor_;
}

const ReadRep& ReadRep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_FileSystem_2eproto();  return *default_instance_;
}

ReadRep* ReadRep::default_instance_ = NULL;

ReadRep* ReadRep::New() const {
  return new ReadRep;
}

void ReadRep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    returnval_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadRep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 returnVal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &returnval_)));
          set_has_returnval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // required string data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadRep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->returnval(), output);
  }
  
  // required string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadRep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 returnVal = 1;
  if (has_returnval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->returnval(), target);
  }
  
  // required string data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadRep::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 returnVal = 1;
    if (has_returnval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->returnval());
    }
    
    // required string data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadRep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadRep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadRep::MergeFrom(const ReadRep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_returnval()) {
      set_returnval(from.returnval());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadRep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRep::CopyFrom(const ReadRep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ReadRep::Swap(ReadRep* other) {
  if (other != this) {
    std::swap(returnval_, other->returnval_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadRep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadRep_descriptor_;
  metadata.reflection = ReadRep_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace myfs

// @@protoc_insertion_point(global_scope)
